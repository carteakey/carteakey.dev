---
layout: layouts/base.njk
templateClass: tmpl-post
---

{# JSON-LD Structured Data for Blog Posts #}
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  "headline": "{{ title }}",
  "description": "{{ description }}",
  "image": {% if image %}"{{ metadata.url }}{{ image }}"{% else %}"{{ metadata.url }}/img/avatar.png"{% endif %},
  "datePublished": "{{ page.date | htmlDateString }}",
  {% if updated %}"dateModified": "{{ updated | htmlDateString }}",{% endif %}
  "author": {
    "@type": "Person",
    "name": "{{ metadata.author.name }}",
    "url": "{{ metadata.author.url }}"
  },
  "publisher": {
    "@type": "Person",
    "name": "{{ metadata.author.name }}",
    "url": "{{ metadata.url }}"
  },
  "mainEntityOfPage": {
    "@type": "WebPage",
    "@id": "{{ metadata.url }}{{ page.url }}"
  },
  "keywords": "{{ tags | filterTagList | join(', ') }}"
}
</script>

{% include "components/breadcrumbs.njk" %}

<h1>{{ title }}</h1>

<h2 class="font-light -mt-7  text-gray-600 dark:text-gray-300">{{ description }}</h2>

<div class="flex flex-col float-right -mt7 text-right text-sm">
  <time datetime="{{ page.date | readableDate }}">{{page.date | readableDate}}</time>
  <span class="text-gray-500 dark:text-gray-400 flex items-center justify-end gap-1 mt-1">
    {% feather "clock", class="w-4 h-4" %}
    {{ content | readingTime }}
  </span>
  <div class="-mx-1">
    {%- for tag in tags | filterTagList %} {%- set tagUrl %}/tags/{{tag | slugify}}/{% endset %}
    <a href="{{ tagUrl | url }}" class="font-light float-right p-1">{{ tag }}</a>
    {%- endfor %}
  </div>
</div>
<hr class="w-9/12 md:w-9/12 ">

{{ content | safe }}

{% if updated %}
<p class='flex flex-col float-right -mt7 text-right text-sm'>
  Updated: <time datetime="{{ updated | readableDate }}">{{updated | readableDate}}</time>
</p> 
{%- endif %}

<!-- Upvote Section -->
<div class="upvote-section mt-8 mb-4 flex items-center">
  <button id="upvoteButton" class="upvote-button p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors flex items-center" aria-label="Upvote this post">
    {% feather "thumbs-up", class="w-6 h-6 text-gray-500 dark:text-gray-400" %}
    <span id="upvoteCount" class="ml-2 text-sm font-medium text-gray-600 dark:text-gray-300">
      {{ upvotes.posts[page.fileSlug] | default(0) }}
    </span>
    <span id="upvoteLoading" class="ml-2 hidden">
      <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-amber-500"></div>
    </span>
  </button>
  <span id="upvoteMessage" class="ml-2 text-sm text-gray-500 dark:text-gray-400 hidden">Thanks for your upvote!</span>
</div>

<script>
  document.addEventListener('DOMContentLoaded', async function() {
    const upvoteButton = document.getElementById('upvoteButton');
    const upvoteCount = document.getElementById('upvoteCount');
    const upvoteMessage = document.getElementById('upvoteMessage');
    const upvoteLoading = document.getElementById('upvoteLoading');
    const postSlug = '{{ page.fileSlug }}';
    const storageKey = `upvote_${postSlug}`;
    
    // Function to fetch current upvote count
    async function fetchUpvoteCount() {
      try {
        upvoteLoading.classList.remove('hidden');
        upvoteCount.classList.add('opacity-50');
        
        const response = await fetch(`/.netlify/functions/upvote?slug=${postSlug}`, {
          method: 'GET'
        });
        if (!response.ok) throw new Error('Failed to fetch count');
        const data = await response.json();
        upvoteCount.textContent = data.count;
      } catch (error) {
        console.error('Error fetching upvote count:', error);
      } finally {
        upvoteLoading.classList.add('hidden');
        upvoteCount.classList.remove('opacity-50');
      }
    }

    // Fetch current count on page load
    await fetchUpvoteCount();
    
    // Check if user has already upvoted this post
    let hasUpvoted = localStorage.getItem(storageKey) === 'true';
    
    // If user has already upvoted, style the button accordingly
    if (hasUpvoted) {
      upvoteButton.classList.add('upvoted');
      upvoteButton.querySelector('svg').classList.add('text-amber-500');
      upvoteButton.querySelector('svg').classList.remove('text-gray-500', 'dark:text-gray-400');
    }
    
    upvoteButton.addEventListener('click', async function() {
      if (hasUpvoted) {
        // Already upvoted - do nothing
        upvoteMessage.textContent = 'You already upvoted this post!';
        upvoteMessage.classList.remove('hidden');
        setTimeout(() => {
          upvoteMessage.classList.add('hidden');
          upvoteMessage.textContent = 'Thanks for your upvote!';
        }, 3000);
        return;
      }

      try {
        const response = await fetch('/.netlify/functions/upvote', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ slug: postSlug })
        });
        
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        
        const data = await response.json();
        
        // Fetch fresh count after successful upvote
        await fetchUpvoteCount();
        
        // Save upvote state to localStorage and update local state
        localStorage.setItem(storageKey, 'true');
        hasUpvoted = true;
        
        // Style the button as upvoted
        upvoteButton.classList.add('upvoted');
        upvoteButton.querySelector('svg').classList.add('text-amber-500');
        upvoteButton.querySelector('svg').classList.remove('text-gray-500', 'dark:text-gray-400');
        
        // Show thank you message
        upvoteMessage.classList.remove('hidden');
        setTimeout(() => {
          upvoteMessage.classList.add('hidden');
        }, 3000);
        
      } catch (error) {
        console.error('Error upvoting:', error);
        upvoteMessage.textContent = 'Error upvoting. Please try again.';
        upvoteMessage.classList.remove('hidden');
        setTimeout(() => {
          upvoteMessage.classList.add('hidden');
          upvoteMessage.textContent = 'Thanks for your upvote!';
        }, 3000);
      }
    });
  });
</script>

<aside class="fixed top-1/4 right-5 xl:right-20 w-40 xl:w-56 h-screen sm:translate-x-0 text-sm hidden lg:block overflow-hidden"
  aria-label="Sidebar">
  <p class="text-lg my-0">Outline</p>
  <div class="overflow-y-auto pr-2" style="max-height: 70vh;">
    {{ content | toc | safe }}
  </div>
</aside>

{%- if collections.posts %}
{%- set currentTags = tags | filterTagList %}
{%- set relatedPosts = [] %}

{# Find related posts based on shared tags #}
{%- for post in collections.posts %}
  {%- if post.url != page.url %}
    {%- set postTags = post.data.tags | filterTagList %}
    {%- set sharedTags = [] %}
    {%- for tag in currentTags %}
      {%- if tag in postTags %}
        {%- set sharedTags = (sharedTags.push(tag), sharedTags) %}
      {%- endif %}
    {%- endfor %}
    {%- if sharedTags.length > 0 %}
      {%- set relatedPosts = (relatedPosts.push({post: post, score: sharedTags.length}), relatedPosts) %}
    {%- endif %}
  {%- endif %}
{%- endfor %}

{# Sort by score and take top 3 #}
{%- set sortedRelated = relatedPosts | sort(attribute='score') | reverse %}

{%- if sortedRelated.length > 0 %}
<hr class="my-8" />
<div class="related-posts">
  <h3 class="text-lg font-semibold mb-3 flex items-center gap-2">
    {% feather "link", class="w-4 h-4" %}
    Related Posts
  </h3>
  <div class="space-y-2">
    {%- for item in sortedRelated | head(3) %}
    <div class="border-l-2 border-gray-300 dark:border-gray-600 pl-3 py-1">
      <a href="{{ item.post.url | url }}" class="font-medium hover:text-amber-600 dark:hover:text-amber-400">
        {{ item.post.data.title }}
      </a>
      <p class="text-gray-600 dark:text-gray-300 text-sm mt-0.5">{{ item.post.data.description }}</p>
    </div>
    {%- endfor %}
  </div>
</div>
<hr class="my-8" />
{%- endif %}

{%- set nextPost = collections.posts | getNextCollectionItem(page) %} 
{%- set previousPost = collections.posts | getPreviousCollectionItem(page) %} 
{%- if nextPost or previousPost %}
<ul>
  {%- if nextPost %}
  <li>
    Next:
    <a href="{{ nextPost.url | url }}">{{ nextPost.data.title }}</a>
  </li>
  {% endif %} {%- if previousPost %}
  <li>
    Previous:
    <a href="{{ previousPost.url | url }}">{{ previousPost.data.title }}</a>
  </li>
  {% endif %}
</ul>
{%- endif %} 
{%- endif %}

<div class="comments">
  <script>
    // load giscus with proper theme
    const getTheme = window.localStorage && window.localStorage.getItem("theme");
    const theme = getTheme === "dark" ? "dark" : "light";
    
    const script = document.createElement('script');
    script.src = "https://giscus.app/client.js";
    script.setAttribute("data-repo", "carteakey/carteakey.dev");
    script.setAttribute("data-repo-id", "R_kgDOIHTsrg"); // You'll need to get this from giscus.app
    script.setAttribute("data-category", "Announcements");
    script.setAttribute("data-category-id", "DIC_kwDOIHTsrs4CnZpB"); // You'll need to get this from giscus.app
    script.setAttribute("data-mapping", "pathname");
    script.setAttribute("data-strict", "0");
    script.setAttribute("data-reactions-enabled", "0");
    script.setAttribute("data-emit-metadata", "0");
    script.setAttribute("data-input-position", "bottom");
    script.setAttribute("data-theme", theme);
    script.setAttribute("data-lang", "en");
    script.crossOrigin = "anonymous";
    script.async = true;
    
    document.querySelector("div.comments").appendChild(script);

    // Handle theme changes
    const mutationObserver = new MutationObserver((mutationsList) => {
      mutationsList.forEach((mutation) => {
        if (mutation.attributeName === "class") {
          const iframe = document.querySelector('.giscus-frame');
          if (iframe) {
            const theme = document.documentElement.classList.contains("dark") ? "dark" : "light";
            iframe.contentWindow.postMessage(
              { giscus: { setConfig: { theme } } },
              'https://giscus.app'
            );
          }
        }
      });
    });
    mutationObserver.observe(document.documentElement, { attributes: true });
  </script>
</div>
